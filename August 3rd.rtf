{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww14900\viewh12200\viewkind0
\deftab720
\pard\pardeftab720\ri0\partightenfactor0

\f0\fs21 \cf0 dot net framework\uc0\u8232 application types\
1. Windows application -> Stand alone- > Notepad.exe -> Independent\uc0\u8232 2. Web Applicatoin -> google.com, Pantene.com- > websites are Hosted internet\u8232 3. console Application-> Stand Alone\u8232 4. XML Web Service -> \u8232 Pantene.com -> Data to be explosed -> List of Users who have registered-> \u8232 Web service/WCF/Rest Full API service/Web API service\u8232 5. Windows Service-> \u8232 6. Class Library project-> Error Handling or Email Sending-> Independent Entity\
MS IDE-> Environment-> Visual Studio \
PreRequistes->\uc0\u8232 VS Installed\u8232 SQL Server\u8232 IIS-> Internet Information Services\u8232 Admin rights\
CLR, CTS and CLS\uc0\u8232 Common Language RunTime\u8232 Common Type System\u8232 Common Language Specifications\
\uc0\u8232 VB.net and C#.net\
VB-> integer-> VBC -> int 32\uc0\u8232 C#-> int -> CSC -> int32\
Common type-> Int32\
\uc0\u8232 Compiler -> Compile my code and check for compilation -> Artefacts\
Artefacts-> dll, exe, .css,.js, .config, .cshtml, .aspx, .asmx, ascx\
\uc0\u8232 Managed Code -> Specifictions-> CLS, CTS -> Compile time-> CTS Complaint->\u8232 CLR Manages the Memory-> GC-> Allocation and De allocation\
int a =16;\uc0\u8232 reserve some memory -> a-> Stack\
Allocation and Deallocation\
UnManaged Code-> CLS Complaint\
\uc0\u8232 ADO.NET-> \
Web Forms/Windows forms (presentation)\uc0\u8232 ADO.NET components (command, Connection etc)\u8232 Database(Data)\
FCL/BCL-> Base Class Library/Framework Class Library\
MSIL/IL-> Microsoft Intermidiate Language/ Intermediate Language\
JIT-> Just In time compiler->\uc0\u8232 IL Code-> Native Code\
HostFileEditor Software\uc0\u8232 https://hostsfileeditor.com/\
DNS-> Domain Name Space Servers\
\uc0\u8232 DLL-> Dynamic Link Library -> Class Library Projects or Web sites/ Web Applications\
Stand Alone application-> .exe \
Jet brains Dot Peek\
https://www.jetbrains.com/decompiler/\
Assebmly ->Logical Grouping of code/program logic\uc0\u8232 .exe/dll\
1. Private Assebmly\uc0\u8232 2. Shared/Public Assembly\u8232 3. Satelite Assembly\
Project 1 and Project 2\uc0\u8232 Project 1 (private.exe)\
Public/shared Assembly -> .exe/dll\
GAC -> Global Assembly Cache -> DL\uc0\u8232 some Steps to be followed\u8232 Create/Generate Strong Name for the assembly\u8232 4 Parts , Name, 4 Part version number\
SateLite Assembly-> Culture settings\uc0\u8232 Load the Culture Spefic artefacts for the particular project\
US-> mm/dd/yyyy\uc0\u8232 IN-> dd/mm/yyyy\
\uc0\u8232 Language syntax\
Set of rules to be followed when some code in specific language\uc0\u8232 C#-> Case Sensitive \
1. Using Keyword\uc0\u8232 2. Namespace -> Logical Grouping of Classes-> N number of Classses defined in one namespace\u8232 3. Class -> Logical grouping of Methods/Properties/Variables/ etc\u8232 4. Methods -> Functions/ sub\u8232 5. Properties and Variables\u8232 6. Access Modifier\u8232 1. Private-> Scope is limited\u8232 2. Public -> Anybody and Everybody (No Restrictions)\u8232 3. Protected-> Inheritance-> the same base class and also to the Derived class\u8232 4. Internal-> Limited to Assembly or the project\u8232 5. Protected Internal->in the same project/assembly and only to the Derived Classes\
7. Data Abstration Keywords -> Hiding \
8. Constructors -> \uc0\u8232 9. Data Types\u8232 Storage (memory)\u8232 1. Stack\u8232 2. Heap\
Two types of Data\uc0\u8232 1. Value types\u8232 For int, Float, Double etc-> Directly represent the value\u8232 they are stored on Stack\u8232 2. Reference types\u8232 The Adress of the data\u8232 Class, Interface, etc\u8232 Does not contain the data directly\u8232 They contain the address where the data is stored\u8232 They are Stored on HEAP Memory\
Data type conversions\uc0\u8232 1. Implicit conversion , Long (int 64), Int (int 32)-> int32 -> Int64 a(int32)=b(int64) XXXX\u8232 2. Explicit conversion\
Variables\uc0\u8232 1. Local Variables\u8232 2. Instance Variables/ non Static Variables\u8232 3. Static Variables\u8232 4. Constant Variables\u8232 5. ReadOnly Variables\
\uc0\u8232 C# Operators\
1. Arithmatic Operator\uc0\u8232 2. Relational Operator\u8232 3. Logical Operator\u8232 4. Assignment Operator\u8232 5. Misc Operator\
1. +,-,*,/, ++,--\
2. == (a==b),!= (a!=b),>,<,>=,<=- Out put of these operators can be Boolean Value only( True or False)\
3. && (AND), ||, ! (NOT) (A&&B)-> !(T&&T)-> False\uc0\u8232 boolean a\u8232 boolean b\
4. = (assign this value) a=b;-> Assign the value of variable b to a\uc0\u8232 += C+=A THIS WILL DO C=C+A\u8232 -= C-=A THIS WIL DO C=C-A\u8232 *= C*=A -> C=C*A\u8232 /= C/=A -> C=C/A\
5.\uc0\u8232 sizeof -> size of Data type -> int a =0; sizeof(a)->\u8232 typeof-> int a =0; typeof(a)-> Int\u8232 ?: a>b?:a:b\u8232 is -> if(Ford is car)-> Boolean\u8232 as-> implicit conversion of the a datatype\
\
dot net framework\uc0\u8232 application types\
1. Windows application -> Stand alone- > Notepad.exe -> Independent\uc0\u8232 2. Web Applicatoin -> google.com, Pantene.com- > websites are Hosted internet\u8232 3. console Application-> Stand Alone\u8232 4. XML Web Service -> \u8232 Pantene.com -> Data to be explosed -> List of Users who have registered-> \u8232 Web service/WCF/Rest Full API service/Web API service\u8232 5. Windows Service-> \u8232 6. Class Library project-> Error Handling or Email Sending-> Independent Entity\
MS IDE-> Environment-> Visual Studio \
PreRequistes->\uc0\u8232 VS Installed\u8232 SQL Server\u8232 IIS-> Internet Information Services\u8232 Admin rights\
CLR, CTS and CLS\uc0\u8232 Common Language RunTime\u8232 Common Type System\u8232 Common Language Specifications\
\uc0\u8232 VB.net and C#.net\
VB-> integer-> VBC -> int 32\uc0\u8232 C#-> int -> CSC -> int32\
Common type-> Int32\
\uc0\u8232 Compiler -> Compile my code and check for compilation -> Artefacts\
Artefacts-> dll, exe, .css,.js, .config, .cshtml, .aspx, .asmx, ascx\
\uc0\u8232 Managed Code -> Specifictions-> CLS, CTS -> Compile time-> CTS Complaint->\u8232 CLR Manages the Memory-> GC-> Allocation and De allocation\
int a =16;\uc0\u8232 reserve some memory -> a-> Stack\
Allocation and Deallocation\
UnManaged Code-> CLS Complaint\
\uc0\u8232 ADO.NET-> \
Web Forms/Windows forms (presentation)\uc0\u8232 ADO.NET components (command, Connection etc)\u8232 Database(Data)\
FCL/BCL-> Base Class Library/Framework Class Library\
MSIL/IL-> Microsoft Intermidiate Language/ Intermediate Language\
JIT-> Just In time compiler->\uc0\u8232 IL Code-> Native Code\
HostFileEditor Software\uc0\u8232 https://hostsfileeditor.com/\
DNS-> Domain Name Space Servers\
\uc0\u8232 DLL-> Dynamic Link Library -> Class Library Projects or Web sites/ Web Applications\
Stand Alone application-> .exe \
Jet brains Dot Peek\
https://www.jetbrains.com/decompiler/\
Assebmly ->Logical Grouping of code/program logic\uc0\u8232 .exe/dll\
1. Private Assebmly\uc0\u8232 2. Shared/Public Assembly\u8232 3. Satelite Assembly\
Project 1 and Project 2\uc0\u8232 Project 1 (private.exe)\
Public/shared Assembly -> .exe/dll\
GAC -> Global Assembly Cache -> DL\uc0\u8232 some Steps to be followed\u8232 Create/Generate Strong Name for the assembly\u8232 4 Parts , Name, 4 Part version number\
SateLite Assembly-> Culture settings\uc0\u8232 Load the Culture Spefic artefacts for the particular project\
US-> mm/dd/yyyy\uc0\u8232 IN-> dd/mm/yyyy\
\uc0\u8232 Language syntax\
Set of rules to be followed when some code in specific language\uc0\u8232 C#-> Case Sensitive \
1. Using Keyword\uc0\u8232 2. Namespace -> Logical Grouping of Classes-> N number of Classses defined in one namespace\u8232 3. Class -> Logical grouping of Methods/Properties/Variables/ etc\u8232 4. Methods -> Functions/ sub\u8232 5. Properties and Variables\u8232 6. Access Modifier\u8232 1. Private-> Scope is limited\u8232 2. Public -> Anybody and Everybody (No Restrictions)\u8232 3. Protected-> Inheritance-> the same base class and also to the Derived class\u8232 4. Internal-> Limited to Assembly or the project\u8232 5. Protected Internal->in the same project/assembly and only to the Derived Classes\
7. Data Abstration Keywords -> Hiding \
8. Constructors -> \uc0\u8232 9. Data Types\u8232 Storage (memory)\u8232 1. Stack\u8232 2. Heap\
Two types of Data\uc0\u8232 1. Value types\u8232 For int, Float, Double etc-> Directly represent the value\u8232 they are stored on Stack\u8232 2. Reference types\u8232 The Adress of the data\u8232 Class, Interface, etc\u8232 Does not contain the data directly\u8232 They contain the address where the data is stored\u8232 They are Stored on HEAP Memory\
Data type conversions\uc0\u8232 1. Implicit conversion , Long (int 64), Int (int 32)-> int32 -> Int64 a(int32)=b(int64) XXXX\u8232 2. Explicit conversion\
Variables\uc0\u8232 1. Local Variables\u8232 2. Instance Variables/ non Static Variables\u8232 3. Static Variables\u8232 4. Constant Variables\u8232 5. ReadOnly Variables\
\uc0\u8232 C# Operators\
1. Arithmatic Operator\uc0\u8232 2. Relational Operator\u8232 3. Logical Operator\u8232 4. Assignment Operator\u8232 5. Misc Operator\
1. +,-,*,/, ++,--\
2. == (a==b),!= (a!=b),>,<,>=,<=- Out put of these operators can be Boolean Value only( True or False)\
3. && (AND), ||, ! (NOT) (A&&B)-> !(T&&T)-> False\uc0\u8232 boolean a\u8232 boolean b\
4. = (assign this value) a=b;-> Assign the value of variable b to a\uc0\u8232 += C+=A THIS WILL DO C=C+A\u8232 -= C-=A THIS WIL DO C=C-A\u8232 *= C*=A -> C=C*A\u8232 /= C/=A -> C=C/A\
5.\uc0\u8232 sizeof -> size of Data type -> int a =0; sizeof(a)->\u8232 typeof-> int a =0; typeof(a)-> Int\u8232 ?: a>b?:a:b\u8232 is -> if(Ford is car)-> Boolean\u8232 as-> implicit conversion of the a datatype\
}